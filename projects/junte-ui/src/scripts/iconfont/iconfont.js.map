{"version":3,"file":"iconfont.js","sourceRoot":"","sources":["iconfont.ts"],"names":[],"mappings":";;;AAAA,uBAAyB;AACzB,2BAA6B;AAC7B,8CAAgD;AAChD,kCAAoC;AACpC,wCAA0C;AAC1C,oCAAsC;AACtC,uCAA0D;AAC1D,4BAA0B;AAE1B,IAAM,aAAa,GAAG,sEAAsE;MACxF,+EAA+E,CAAC;AACpF,IAAM,WAAW,GAAG,eAAe,CAAC;AACpC,IAAM,aAAa,GAAG,UAAU,CAAC;AACjC,IAAM,SAAS,GAAG,IAAI,CAAC;AAEvB;IAAA;QACE,YAAO,GAAG,EAAE,CAAC;QACb,cAAS,GAAG,EAAE,CAAC;QACf,aAAQ,GAAG,EAAE,CAAC;IAChB,CAAC;IAAD,iBAAC;AAAD,CAAC,AAJD,IAIC;AAGD;IAAA;IA8DA,CAAC;IA5DS,wBAAK,GAAb;QACE,OAAO,EAAE,CAAC,UAAU,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,GAAG,aAAa,CAAC,CAAC;IAChG,CAAC;IAEO,uBAAI,GAAZ;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,WAAW,GAAG,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;IACzE,CAAC;IAEa,yBAAM,GAApB;;;gBACE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;oBAC9B,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;iBAC1B;gBACD,EAAE,CAAC,aAAa,CAAC,WAAW,GAAG,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBACzF,EAAE,CAAC,YAAY,CAAC,wBAAwB,GAAG,aAAa,EAAE,WAAW,GAAG,aAAa,CAAC,CAAC;gBACvF,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;;;;KACxC;IAGD,yBAAM,GAAN,UAAO,EAAE;QACP,IAAM,KAAK,GAAiB,IAAI,CAAC,IAAI,EAAE,CAAC;QACxC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YAChB,IAAI,CAAC,GAAG,CAAC,CAAI,IAAI,CAAC,OAAO,WAAQ,CAAC,CAAC;iBAChC,IAAI,CAAC,KAAK,EAAE,CAAC;iBACb,IAAI,CAAC,QAAQ,CAAC;gBACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,cAAc,EAAE,IAAI;gBACpB,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC;gBAC/C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBAC7C,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;iBACF,EAAE,CAAC,QAAQ,EAAE,UAAU,MAAM;gBAC5B,MAAM,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE,GAAG,EAAE,GAAG;oBACtC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC;qBAC1B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;oBAC1B,MAAM,EAAE,MAAM;oBACd,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,MAAM;iBAClB,CAAC,CAAC;qBACF,IAAI,CAAC,MAAM,CAAI,IAAI,CAAC,QAAQ,eAAY,CAAC,CAAC;qBAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,IAAI,CAAC,SAAS,SAAI,IAAI,CAAC,QAAU,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,IAAI,CAAC,SAAS,SAAI,IAAI,CAAC,QAAU,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QACH,EAAE,EAAE,CAAC;IACP,CAAC;IAGD,+BAAY,GAAZ;QACE,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAID,wBAAK,GAAL;QACE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;IACtD,CAAC;IAzCD;QADC,gBAAI,EAAE;;;;0CA+BN;IAGD;QADC,gBAAI,EAAE;;;;gDAGN;IAID;QADC,wBAAY,EAAE;;;;yCAGd;IA7DU,QAAQ;QADpB,qBAAS,EAAE;OACC,QAAQ,CA8DpB;IAAD,eAAC;CAAA,AA9DD,IA8DC;AA9DY,4BAAQ","sourcesContent":["import * as fs from 'fs';\nimport * as gulp from 'gulp';\nimport * as consolidate from 'gulp-consolidate';\nimport * as debug from 'gulp-debug';\nimport * as iconfont from 'gulp-iconfont';\nimport * as rename from 'gulp-rename';\nimport { Gulpclass, SequenceTask, Task } from 'gulpclass';\nimport 'reflect-metadata';\n\nconst ICONFONT_INFO = 'A config file(iconfont.json) and template for the iconfont creating '\n  + 'has been created in the root directory. Set your preferences for the library.';\nconst CONFIG_NAME = 'iconfont.json';\nconst TEMPLATE_NAME = 'template';\nconst TIMESTAMP = 1000;\n\nclass FontConfig {\n  svgPath = '';\n  fontsPath = '';\n  fontName = '';\n}\n\n@Gulpclass()\nexport class Gulpfile {\n\n  private check() {\n    return fs.existsSync('iconfont/' + CONFIG_NAME) && fs.existsSync('iconfont/' + TEMPLATE_NAME);\n  }\n\n  private read(): FontConfig[] {\n    return JSON.parse(fs.readFileSync('iconfont/' + CONFIG_NAME, 'utf-8'));\n  }\n\n  private async create() {\n    if (!fs.existsSync('iconfont')) {\n      fs.mkdirSync('iconfont');\n    }\n    fs.writeFileSync('iconfont/' + CONFIG_NAME, JSON.stringify([new FontConfig()], null, 4));\n    fs.copyFileSync('node_modules/junte-ui/' + TEMPLATE_NAME, 'iconfont/' + TEMPLATE_NAME);\n    console.log('\\x1b[31m', ICONFONT_INFO);\n  }\n\n  @Task()\n  styles(cb) {\n    const fonts: FontConfig[] = this.read();\n    fonts.forEach(font => {\n      gulp.src([`${font.svgPath}/*.svg`])\n        .pipe(debug())\n        .pipe(iconfont({\n          fontName: font.fontName,\n          prependUnicode: true,\n          formats: ['ttf', 'woff', 'svg', 'eot', 'woff2'],\n          timestamp: Math.round(Date.now() / TIMESTAMP),\n          normalize: true,\n          fontHeight: 1001\n        }))\n        .on('glyphs', function (glyphs) {\n          glyphs.forEach(function (glyph, idx, arr) {\n            arr[idx].unicode[0] = glyph.unicode[0].charCodeAt(0).toString(16);\n          });\n          gulp.src('iconfont/template')\n            .pipe(consolidate('lodash', {\n              glyphs: glyphs,\n              fontName: font.fontName,\n              fontPath: './',\n              className: 'icon'\n            }))\n            .pipe(rename(`${font.fontName}-font.scss`))\n            .pipe(gulp.dest(`${font.fontsPath}/${font.fontName}`));\n        })\n        .pipe(gulp.dest(`${font.fontsPath}/${font.fontName}`));\n    });\n    cb();\n  }\n\n  @Task()\n  createConfig() {\n    return this.create();\n  }\n\n\n  @SequenceTask()\n  build() {\n    return this.check() ? ['styles'] : ['createConfig'];\n  }\n}\n"]}